/*
 * Copyright (C) 2012 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

package com.androidtweak.inputmethod.keyboard.internal;

import android.content.Context;
import android.content.res.Resources;

import com.androidtweak.inputmethod.myanmar.R;

import java.util.HashMap;

/**
 * !!!!! DO NOT EDIT THIS FILE !!!!!
 *
 * This file is generated by tools/maketext. The base template file is
 *   tools/maketext/res/com/android/inputmethod/keyboard/internal/KeyboardTextsSet.tmpl
 *
 * This file must be updated when any text resources in keyboard layout files have been changed.
 * These text resources are referred as "!text/<resource_name>" in keyboard XML definitions,
 * and should be defined in
 *   tools/maketext/res/values-<locale>/donottranslate-more-keys.xml
 *
 * To update this file, please run the following commands.
 *   $ cd $ANDROID_BUILD_TOP
 *   $ mmm packages/inputmethods/MyanmarIME/tools/maketext
 *   $ maketext -java packages/inputmethods/MyanmarIME/java/src
 *
 * The updated source file will be generated to the following path (this file).
 *   packages/inputmethods/MyanmarIME/java/src/com/android/inputmethod/keyboard/internal/
 *   KeyboardTextsSet.java
 */
public final class KeyboardTextsSet {
    // Language to texts map.
    private static final HashMap<String, String[]> sLocaleToTextsMap =
            new HashMap<String, String[]>();
    private static final HashMap<String, Integer> sNameToIdsMap =
            new HashMap<String, Integer>();

    private String[] mTexts;
    // Resource name to text map.
    private HashMap<String, String> mResourceNameToTextsMap = new HashMap<String, String>();

    public void setLanguage(final String language) {
        mTexts = sLocaleToTextsMap.get(language);
        if (mTexts == null) {
            mTexts = LANGUAGE_DEFAULT;
        }
    }

    public void loadStringResources(Context context) {
        loadStringResourcesInternal(context, RESOURCE_NAMES, R.string.english_ime_name);
    }

    /* package for test */
    void loadStringResourcesInternal(Context context, final String[] resourceNames,
            int referenceId) {
        final Resources res = context.getResources();
        final String packageName = res.getResourcePackageName(referenceId);
        for (final String resName : resourceNames) {
            final int resId = res.getIdentifier(resName, "string", packageName);
            mResourceNameToTextsMap.put(resName, res.getString(resId));
        }
    }

    public String getText(final String name) {
        String text = mResourceNameToTextsMap.get(name);
        if (text != null) {
            return text;
        }
        final Integer id = sNameToIdsMap.get(name);
        if (id == null) throw new RuntimeException("Unknown label: " + name);
        text = (id < mTexts.length) ? mTexts[id] : null;
        return (text == null) ? LANGUAGE_DEFAULT[id] : text;
    }

    private static final String[] RESOURCE_NAMES = {
        // These texts' name should be aligned with the @string/<name> in values/strings.xml.
        // Labels for action.
        "label_go_key",
        // "label_search_key",
        "label_send_key",
        "label_next_key",
        "label_done_key",
        "label_previous_key",
        // Other labels.
        "label_to_alpha_key",
        "label_to_symbol_key",
        "label_to_symbol_with_microphone_key",
        "label_pause_key",
        "label_wait_key",
    };

    private static final String[] NAMES = {
        /*  0 */ "more_keys_for_a",
        /*  1 */ "more_keys_for_e",
        /*  2 */ "more_keys_for_i",
        /*  3 */ "more_keys_for_o",
        /*  4 */ "more_keys_for_u",
        /*  5 */ "more_keys_for_s",
        /*  6 */ "more_keys_for_n",
        /*  7 */ "more_keys_for_c",
        /*  8 */ "more_keys_for_y",
        /*  9 */ "more_keys_for_d",
        /* 10 */ "more_keys_for_r",
        /* 11 */ "more_keys_for_t",
        /* 12 */ "more_keys_for_z",
        /* 13 */ "more_keys_for_k",
        /* 14 */ "more_keys_for_l",
        /* 15 */ "more_keys_for_g",
        /* 16 */ "more_keys_for_v",
        /* 17 */ "more_keys_for_h",
        /* 18 */ "more_keys_for_j",
        /* 19 */ "more_keys_for_w",
        /* 20 */ "keylabel_for_nordic_row1_11",
        /* 21 */ "keylabel_for_nordic_row2_10",
        /* 22 */ "keylabel_for_nordic_row2_11",
        /* 23 */ "more_keys_for_nordic_row2_10",
        /* 24 */ "more_keys_for_nordic_row2_11",
        /* 25 */ "keylabel_for_east_slavic_row1_9",
        /* 26 */ "keylabel_for_east_slavic_row2_1",
        /* 27 */ "keylabel_for_east_slavic_row2_2",
        /* 28 */ "keylabel_for_east_slavic_row3_5",
        /* 29 */ "more_keys_for_cyrillic_u",
        /* 30 */ "more_keys_for_cyrillic_ye",
        /* 31 */ "more_keys_for_cyrillic_en",
        /* 32 */ "more_keys_for_cyrillic_g",
        /* 33 */ "more_keys_for_cyrillic_ha",
        /* 34 */ "more_keys_for_east_slavic_row2_1",
        /* 35 */ "more_keys_for_cyrillic_o",
        /* 36 */ "more_keys_for_cyrillic_soft_sign",
        /* 37 */ "keylabel_for_south_slavic_row1_6",
        /* 38 */ "keylabel_for_south_slavic_row2_11",
        /* 39 */ "keylabel_for_south_slavic_row3_1",
        /* 40 */ "keylabel_for_south_slavic_row3_8",
        /* 41 */ "more_keys_for_cyrillic_ie",
        /* 42 */ "more_keys_for_cyrillic_i",
        /* 43 */ "more_keys_for_single_quote",
        /* 44 */ "more_keys_for_double_quote",
        /* 45 */ "more_keys_for_tablet_double_quote",
        /* 46 */ "more_keys_for_currency_dollar",
        /* 47 */ "more_keys_for_currency_euro",
        /* 48 */ "more_keys_for_currency_pound",
        /* 49 */ "more_keys_for_currency_general",
        /* 50 */ "more_keys_for_punctuation",
        /* 51 */ "more_keys_for_star",
        /* 52 */ "more_keys_for_bullet",
        /* 53 */ "more_keys_for_plus",
        /* 54 */ "more_keys_for_left_parenthesis",
        /* 55 */ "more_keys_for_right_parenthesis",
        /* 56 */ "more_keys_for_less_than",
        /* 57 */ "more_keys_for_greater_than",
        /* 58 */ "more_keys_for_arabic_diacritics",
        /* 59 */ "keyhintlabel_for_arabic_diacritics",
        /* 60 */ "keylabel_for_symbols_1",
        /* 61 */ "keylabel_for_symbols_2",
        /* 62 */ "keylabel_for_symbols_3",
        /* 63 */ "keylabel_for_symbols_4",
        /* 64 */ "keylabel_for_symbols_5",
        /* 65 */ "keylabel_for_symbols_6",
        /* 66 */ "keylabel_for_symbols_7",
        /* 67 */ "keylabel_for_symbols_8",
        /* 68 */ "keylabel_for_symbols_9",
        /* 69 */ "keylabel_for_symbols_0",
        /* 70 */ "additional_more_keys_for_symbols_1",
        /* 71 */ "additional_more_keys_for_symbols_2",
        /* 72 */ "additional_more_keys_for_symbols_3",
        /* 73 */ "additional_more_keys_for_symbols_4",
        /* 74 */ "additional_more_keys_for_symbols_5",
        /* 75 */ "additional_more_keys_for_symbols_6",
        /* 76 */ "additional_more_keys_for_symbols_7",
        /* 77 */ "additional_more_keys_for_symbols_8",
        /* 78 */ "additional_more_keys_for_symbols_9",
        /* 79 */ "additional_more_keys_for_symbols_0",
        /* 80 */ "more_keys_for_symbols_1",
        /* 81 */ "more_keys_for_symbols_2",
        /* 82 */ "more_keys_for_symbols_3",
        /* 83 */ "more_keys_for_symbols_4",
        /* 84 */ "more_keys_for_symbols_5",
        /* 85 */ "more_keys_for_symbols_6",
        /* 86 */ "more_keys_for_symbols_7",
        /* 87 */ "more_keys_for_symbols_8",
        /* 88 */ "more_keys_for_symbols_9",
        /* 89 */ "more_keys_for_symbols_0",
        /* 90 */ "keylabel_for_comma",
        /* 91 */ "more_keys_for_comma",
        /* 92 */ "keylabel_for_symbols_exclamation",
        /* 93 */ "keylabel_for_symbols_question",
        /* 94 */ "keylabel_for_symbols_semicolon",
        /* 95 */ "keylabel_for_symbols_percent",
        /* 96 */ "more_keys_for_symbols_exclamation",
        /* 97 */ "more_keys_for_symbols_question",
        /* 98 */ "more_keys_for_symbols_semicolon",
        /* 99 */ "more_keys_for_symbols_percent",
        /* 100 */ "keylabel_for_tablet_comma",
        /* 101 */ "keyhintlabel_for_tablet_comma",
        /* 102 */ "more_keys_for_tablet_comma",
        /* 103 */ "keyhintlabel_for_tablet_period",
        /* 104 */ "more_keys_for_tablet_period",
        /* 105 */ "keylabel_for_apostrophe",
        /* 106 */ "keyhintlabel_for_apostrophe",
        /* 107 */ "more_keys_for_apostrophe",
        /* 108 */ "more_keys_for_am_pm",
        /* 109 */ "settings_as_more_key",
        /* 110 */ "shortcut_as_more_key",
        /* 111 */ "action_next_as_more_key",
        /* 112 */ "action_previous_as_more_key",
        /* 113 */ "label_to_more_symbol_key",
        /* 114 */ "label_to_more_symbol_for_tablet_key",
        /* 115 */ "label_tab_key",
        /* 116 */ "label_to_phone_numeric_key",
        /* 117 */ "label_to_phone_symbols_key",
        /* 118 */ "label_time_am",
        /* 119 */ "label_time_pm",
        /* 120 */ "label_to_symbol_key_pcqwerty",
        /* 121 */ "keylabel_for_popular_domain",
        /* 122 */ "more_keys_for_popular_domain",
        /* 123 */ "more_keys_for_smiley",
    };

    private static final String EMPTY = "";

    /* Default texts */
    private static final String[] LANGUAGE_DEFAULT = {
        /* 0~ */
        EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY,
        EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY,
        EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY,
        EMPTY, EMPTY, EMPTY, EMPTY,
        /* ~42 */
        /* 43 */ "!fixedColumnOrder!4,\u2018,\u2019,\u201A,\u201B",
        // TODO: Neither DroidSans nor Roboto have the glyph for U+201F DOUBLE HIGH-REVERSED-9 QUOTATION MARK.
        // <string name="more_keys_for_double_quote">!fixedColumnOrder!6,&#x201C;,&#x201D;,&#x201E;,&#x201F;,&#x00AB;,&#x00BB;</string>
        /* 44 */ "!fixedColumnOrder!4,\u201C,\u201D,\u00AB,\u00BB",
        // TODO: Neither DroidSans nor Roboto have the glyph for U+201F DOUBLE HIGH-REVERSED-9 QUOTATION MARK.
        // <string name="more_keys_for_tablet_double_quote">!fixedColumnOrder!6,&#x201C;,&#x201D;,&#x201E;,&#x201F;,&#x00AB;,&#x00BB;,&#x2018;,&#x2019;,&#x201A;,&#x201B;</string>
        /* 45 */ "!fixedColumnOrder!4,\u201C,\u201D,\u00AB,\u00BB,\u2018,\u2019,\u201A,\u201B",
        // U+00A2: "¢" CENT SIGN
        // U+00A3: "£" POUND SIGN
        // U+20AC: "€" EURO SIGN
        // U+00A5: "¥" YEN SIGN
        // U+20B1: "₱" PESO SIGN
        // U+20B9: "₹" RUPEE SIGN
        /* 46 */ "\u00A2,\u00A3,\u20AC,\u00A5,\u20B1,\u20B9",
        /* 47 */ "\u00A2,\u00A3,$,\u00A5,\u20B1,\u20B9",
        /* 48 */ "\u00A2,$,\u20AC,\u00A5,\u20B1,\u20B9",
        /* 49 */ "\u00A2,$,\u20AC,\u00A3,\u00A5,\u20B1,\u20B9",
        /* 50 */ "!fixedColumnOrder!8,\",\',#,-,:,!,\\,,?,@,&,\\%,+,;,/,(,)",
        // U+2020: "†" DAGGER
        // U+2021: "‡" DOUBLE DAGGER
        // U+2605: "★" BLACK STAR
        /* 51 */ "\u2020,\u2021,\u2605",
        // U+266A: "♪" EIGHTH NOTE
        // U+2665: "♥" BLACK HEART SUIT
        // U+2660: "♠" BLACK SPADE SUIT
        // U+2666: "♦" BLACK DIAMOND SUIT
        // U+2663: "♣" BLACK CLUB SUIT
        /* 52 */ "\u266A,\u2665,\u2660,\u2666,\u2663",
        // U+00B1: "±" PLUS-MINUS SIGN
        /* 53 */ "\u00B1",
        // The all letters need to be mirrored are found at
        // http://www.unicode.org/Public/6.1.0/ucd/BidiMirroring.txt
        /* 54 */ "!fixedColumnOrder!3,<,{,[",
        /* 55 */ "!fixedColumnOrder!3,>,},]",
        // U+2039: "‹" SINGLE LEFT-POINTING ANGLE QUOTATION MARK
        // U+203A: "›" SINGLE RIGHT-POINTING ANGLE QUOTATION MARK
        // U+2264: "≤" LESS-THAN OR EQUAL TO
        // U+2265: "≥" GREATER-THAN EQUAL TO
        // U+00AB: "«" LEFT-POINTING DOUBLE ANGLE QUOTATION MARK
        // U+00BB: "»" RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK
        // The following characters don't need BIDI mirroring.
        // U+2018: "‘" LEFT SINGLE QUOTATION MARK
        // U+2019: "’" RIGHT SINGLE QUOTATION MARK
        // U+201A: "‚" SINGLE LOW-9 QUOTATION MARK
        // U+201B: "‛" SINGLE HIGH-REVERSED-9 QUOTATION MARK
        // U+201C: "“" LEFT DOUBLE QUOTATION MARK
        // U+201D: "”" RIGHT DOUBLE QUOTATION MARK
        // U+201E: "„" DOUBLE LOW-9 QUOTATION MARK
        // U+201F: "‟" DOUBLE HIGH-REVERSED-9 QUOTATION MARK
        /* 56 */ "!fixedColumnOrder!3,\u2039,\u2264,\u00AB",
        /* 57 */ "!fixedColumnOrder!3,\u203A,\u2265,\u00BB",
        /* 58 */ EMPTY,
        /* 59 */ EMPTY,
        /* 60 */ "1",
        /* 61 */ "2",
        /* 62 */ "3",
        /* 63 */ "4",
        /* 64 */ "5",
        /* 65 */ "6",
        /* 66 */ "7",
        /* 67 */ "8",
        /* 68 */ "9",
        /* 69 */ "0",
        /* 70~ */
        EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY,
        /* ~79 */
        // U+00B9: "¹" SUPERSCRIPT ONE
        // U+00BD: "½" VULGAR FRACTION ONE HALF
        // U+2153: "⅓" VULGAR FRACTION ONE THIRD
        // U+00BC: "¼" VULGAR FRACTION ONE QUARTER
        // U+215B: "⅛" VULGAR FRACTION ONE EIGHTH
        /* 80 */ "\u00B9,\u00BD,\u2153,\u00BC,\u215B",
        // U+00B2: "²" SUPERSCRIPT TWO
        // U+2154: "⅔" VULGAR FRACTION TWO THIRDS
        /* 81 */ "\u00B2,\u2154",
        // U+00B3: "³" SUPERSCRIPT THREE
        // U+00BE: "¾" VULGAR FRACTION THREE QUARTERS
        // U+215C: "⅜" VULGAR FRACTION THREE EIGHTHS
        /* 82 */ "\u00B3,\u00BE,\u215C",
        // U+2074: "⁴" SUPERSCRIPT FOUR
        /* 83 */ "\u2074",
        // U+215D: "⅝" VULGAR FRACTION FIVE EIGHTHS
        /* 84 */ "\u215D",
        /* 85 */ EMPTY,
        // U+215E: "⅞" VULGAR FRACTION SEVEN EIGHTHS
        /* 86 */ "\u215E",
        /* 87 */ EMPTY,
        /* 88 */ EMPTY,
        // U+207F: "ⁿ" SUPERSCRIPT LATIN SMALL LETTER N
        // U+2205: "∅" EMPTY SET
        /* 89 */ "\u207F,\u2205",
        /* 90 */ ",",
        /* 91 */ EMPTY,
        /* 92 */ "!",
        /* 93 */ "?",
        /* 94 */ ";",
        /* 95 */ "%",
        // U+00A1: "¡" INVERTED EXCLAMATION MARK
        /* 96 */ "\u00A1",
        // U+00BF: "¿" INVERTED QUESTION MARK
        /* 97 */ "\u00BF",
        /* 98 */ EMPTY,
        // U+2030: "‰" PER MILLE SIGN
        /* 99 */ "\u2030",
        /* 100 */ ",",
        /* 101 */ "!",
        /* 102 */ "!",
        /* 103 */ "?",
        /* 104 */ "?",
        /* 105 */ "\'",
        /* 106 */ "\"",
        /* 107 */ "\"",
        /* 108 */ "!fixedColumnOrder!2,!hasLabels!,!text/label_time_am,!text/label_time_pm",
        /* 109 */ "!icon/settings_key|!code/key_settings",
        /* 110 */ "!icon/shortcut_key|!code/key_shortcut",
        /* 111 */ "!hasLabels!,!text/label_next_key|!code/key_action_next",
        /* 112 */ "!hasLabels!,!text/label_previous_key|!code/key_action_previous",
        // Label for "switch to more symbol" modifier key.  Must be short to fit on key!
        /* 113 */ "= \\ <",
        // Label for "switch to more symbol" modifier key on tablets.  Must be short to fit on key!
        /* 114 */ "~ \\ {",
        // Label for "Tab" key.  Must be short to fit on key!
        /* 115 */ "Tab",
        // Label for "switch to phone numeric" key.  Must be short to fit on key!
        /* 116 */ "123",
        // Label for "switch to phone symbols" key.  Must be short to fit on key!
        // U+FF0A: "＊" FULLWIDTH ASTERISK
        // U+FF03: "＃" FULLWIDTH NUMBER SIGN
        /* 117 */ "\uFF0A\uFF03",
        // Key label for "ante meridiem"
        /* 118 */ "AM",
        // Key label for "post meridiem"
        /* 119 */ "PM",
        // Label for "switch to symbols" key on PC QWERTY layout
        /* 120 */ "Sym",
        /* 121 */ ".com",
        // popular web domains for the locale - most popular, displayed on the keyboard
        /* 122 */ "!hasLabels!,.net,.org,.gov,.edu",
        /* 123 */ "!fixedColumnOrder!5,!hasLabels!,=-O|=-O ,:-P|:-P ,;-)|;-) ,:-(|:-( ,:-)|:-) ,:-!|:-! ,:-$|:-$ ,B-)|B-) ,:O|:O ,:-*|:-* ,:-D|:-D ,:\'(|:\'( ,:-\\\\|:-\\\\ ,O:-)|O:-) ,:-[|:-[ ",
    };

    /* Language en: English */
    private static final String[] LANGUAGE_en = {
        // U+00E0: "à" LATIN SMALL LETTER A WITH GRAVE
        // U+00E1: "á" LATIN SMALL LETTER A WITH ACUTE
        // U+00E2: "â" LATIN SMALL LETTER A WITH CIRCUMFLEX
        // U+00E4: "ä" LATIN SMALL LETTER A WITH DIAERESIS
        // U+00E6: "æ" LATIN SMALL LETTER AE
        // U+00E3: "ã" LATIN SMALL LETTER A WITH TILDE
        // U+00E5: "å" LATIN SMALL LETTER A WITH RING ABOVE
        // U+0101: "ā" LATIN SMALL LETTER A WITH MACRON
        /* 0 */ "\u00E0,\u00E1,\u00E2,\u00E4,\u00E6,\u00E3,\u00E5,\u0101",
        // U+00E8: "è" LATIN SMALL LETTER E WITH GRAVE
        // U+00E9: "é" LATIN SMALL LETTER E WITH ACUTE
        // U+00EA: "ê" LATIN SMALL LETTER E WITH CIRCUMFLEX
        // U+00EB: "ë" LATIN SMALL LETTER E WITH DIAERESIS
        // U+0113: "ē" LATIN SMALL LETTER E WITH MACRON
        /* 1 */ "\u00E8,\u00E9,\u00EA,\u00EB,\u0113",
        // U+00EE: "î" LATIN SMALL LETTER I WITH CIRCUMFLEX
        // U+00EF: "ï" LATIN SMALL LETTER I WITH DIAERESIS
        // U+00ED: "í" LATIN SMALL LETTER I WITH ACUTE
        // U+012B: "ī" LATIN SMALL LETTER I WITH MACRON
        // U+00EC: "ì" LATIN SMALL LETTER I WITH GRAVE
        /* 2 */ "\u00EE,\u00EF,\u00ED,\u012B,\u00EC",
        // U+00F4: "ô" LATIN SMALL LETTER O WITH CIRCUMFLEX
        // U+00F6: "ö" LATIN SMALL LETTER O WITH DIAERESIS
        // U+00F2: "ò" LATIN SMALL LETTER O WITH GRAVE
        // U+00F3: "ó" LATIN SMALL LETTER O WITH ACUTE
        // U+0153: "œ" LATIN SMALL LIGATURE OE
        // U+00F8: "ø" LATIN SMALL LETTER O WITH STROKE
        // U+014D: "ō" LATIN SMALL LETTER O WITH MACRON
        // U+00F5: "õ" LATIN SMALL LETTER O WITH TILDE
        /* 3 */ "\u00F4,\u00F6,\u00F2,\u00F3,\u0153,\u00F8,\u014D,\u00F5",
        // U+00FB: "û" LATIN SMALL LETTER U WITH CIRCUMFLEX
        // U+00FC: "ü" LATIN SMALL LETTER U WITH DIAERESIS
        // U+00F9: "ù" LATIN SMALL LETTER U WITH GRAVE
        // U+00FA: "ú" LATIN SMALL LETTER U WITH ACUTE
        // U+016B: "ū" LATIN SMALL LETTER U WITH MACRON
        /* 4 */ "\u00FB,\u00FC,\u00F9,\u00FA,\u016B",
        // U+00DF: "ß" LATIN SMALL LETTER SHARP S
        /* 5 */ "\u00DF",
        // U+00F1: "ñ" LATIN SMALL LETTER N WITH TILDE
        /* 6 */ "\u00F1",
        // U+00E7: "ç" LATIN SMALL LETTER C WITH CEDILLA
        /* 7 */ "\u00E7",
    };

    /* Language hi: Hindi */
    private static final String[] LANGUAGE_hi = {
        /* 0~ */
        null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
        /* ~59 */
        // U+0967: "१" DEVANAGARI DIGIT ONE
        /* 60 */ "\u0967",
        // U+0968: "२" DEVANAGARI DIGIT TWO
        /* 61 */ "\u0968",
        // U+0969: "३" DEVANAGARI DIGIT THREE
        /* 62 */ "\u0969",
        // U+096A: "४" DEVANAGARI DIGIT FOUR
        /* 63 */ "\u096A",
        // U+096B: "५" DEVANAGARI DIGIT FIVE
        /* 64 */ "\u096B",
        // U+096C: "६" DEVANAGARI DIGIT SIX
        /* 65 */ "\u096C",
        // U+096D: "७" DEVANAGARI DIGIT SEVEN
        /* 66 */ "\u096D",
        // U+096E: "८" DEVANAGARI DIGIT EIGHT
        /* 67 */ "\u096E",
        // U+096F: "९" DEVANAGARI DIGIT NINE
        /* 68 */ "\u096F",
        // U+0966: "०" DEVANAGARI DIGIT ZERO
        /* 69 */ "\u0966",
        /* 70 */ "1",
        /* 71 */ "2",
        /* 72 */ "3",
        /* 73 */ "4",
        /* 74 */ "5",
        /* 75 */ "6",
        /* 76 */ "7",
        /* 77 */ "8",
        /* 78 */ "9",
        /* 79 */ "0",
    };

    /* Language ml: Malayalam */
    private static final String[] LANGUAGE_ml = {
        /* 0~ */
        null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null, null, null,
        /* ~69 */
        // U+0966: "൧" MALAYALAM DIGIT ONE
        /* 70 */ "\u0D67",
        // U+0966: "൨" MALAYALAM DIGIT TWO
        /* 71 */ "\u0D68",
        // U+0966: "൩" MALAYALAM DIGIT THREE
        /* 72 */ "\u0D69",
        // U+0966: "൪" MALAYALAM DIGIT FOUR
        /* 73 */ "\u0D6A",
        // U+0966: "൫" MALAYALAM DIGIT FIVE
        /* 74 */ "\u0D6B",
        // U+0966: "൬" MALAYALAM DIGIT SIX
        /* 75 */ "\u0D6C",
        // U+0966: "൭" MALAYALAM DIGIT SEVEN
        /* 76 */ "\u0D6D",
        // U+0966: "൮" MALAYALAM DIGIT EIGHT
        /* 77 */ "\u0D6E",
        // U+0966: "൯" MALAYALAM DIGIT NINE
        /* 78 */ "\u0D6F",
        // U+0966: "൦" MALAYALAM DIGIT ZERO
        /* 79 */ "\u0D66",
    };

    /* Language ta: Tamil */
    private static final String[] LANGUAGE_ta = {
        /* 0~ */
        null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
        null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
        /* ~59 */
        // U+0BE7: "௧" TAMIL DIGIT ONE
        /* 60 */ "\u0BE7",
        // U+0BE8: "௨" TAMIL DIGIT TWO
        /* 61 */ "\u0BE8",
        // U+0BE9: "௩" TAMIL DIGIT THREE
        /* 62 */ "\u0BE9",
        // U+0BEA: "௪" TAMIL DIGIT FOUR
        /* 63 */ "\u0BEA",
        // U+0BEB: "௫" TAMIL DIGIT FIVE
        /* 64 */ "\u0BEB",
        // U+0BEC: "௬" TAMIL DIGIT SIX
        /* 65 */ "\u0BEC",
        // U+0BED: "௭" TAMIL DIGIT SEVEN
        /* 66 */ "\u0BED",
        // U+0BEE: "௮" TAMIL DIGIT EIGHT
        /* 67 */ "\u0BEE",
        // U+0BEF: "௯" TAMIL DIGIT NINE
        /* 68 */ "\u0BEF",
        // U+0BE6: "௦" TAMIL DIGIT ZERO
        /* 69 */ "\u0BE6",
        /* 70 */ "1",
        /* 71 */ "2",
        /* 72 */ "3",
        /* 73 */ "4",
        /* 74 */ "5",
        /* 75 */ "6",
        /* 76 */ "7",
        /* 77 */ "8",
        /* 78 */ "9",
        /* 79 */ "0",
    };

    private static final Object[] LANGUAGES_AND_TEXTS = {
        "DEFAULT", LANGUAGE_DEFAULT, /* default */
        "en", LANGUAGE_en, /* English */
        "hi", LANGUAGE_hi, /* Hindi */
        "ml", LANGUAGE_ml, /* Malayalam */
        "ta", LANGUAGE_ta, /* Tamil */
    };

    static {
        int id = 0;
        for (final String name : NAMES) {
            sNameToIdsMap.put(name, id++);
        }

        for (int i = 0; i < LANGUAGES_AND_TEXTS.length; i += 2) {
            final String language = (String)LANGUAGES_AND_TEXTS[i];
            final String[] texts = (String[])LANGUAGES_AND_TEXTS[i + 1];
            sLocaleToTextsMap.put(language, texts);
        }
    }
}
